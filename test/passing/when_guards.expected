type _ Stdlib.Effect.t +=  
  | Foo: bool -> unit Stdlib.Effect.t 
let _ =
  Ppx_effects_runtime.match_with (fun `unit -> false) `unit
    {
      Ppx_effects_runtime.retc = (function | _ when true -> 'a' | _ -> 'b');
      exnc =
        (function
         | Not_found -> 'c'
         | Failure s when String.equal s "Oops" -> 'd'
         | e -> Ppx_effects_runtime.raise e);
      effc =
        (let effc : type continue_input.
           continue_input Stdlib.Effect.t ->
             ((continue_input, _) Stdlib.Effect.Deep.continuation -> _)
               option
           =
           function
           | Foo b when b -> Some ((fun _ -> 'e'))
           | Foo b when not b -> Some ((fun _ -> 'e'))
           | Foo _ -> Some ((fun k -> Effect.Deep.continue k ()))
           | _ -> None in
         effc)
    }
