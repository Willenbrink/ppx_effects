open Stdlib.Effect
open Stdlib.Effect.Deep
type _ Stdlib.Effect.t +=  
  | E: string Stdlib.Effect.t 
let comp () = print_string "0 "; print_string (perform E); print_string "3 "
let () =
  Ppx_effects_runtime.try_with comp ()
    {
      Ppx_effects_runtime.effc =
        (let effc : type continue_input.
           continue_input Stdlib.Effect.t ->
             ((continue_input, _) Stdlib.Effect.Deep.continuation -> _)
               option
           =
           function
           | E ->
               Some
                 ((fun k ->
                     print_string "1 "; continue k "2 "; print_string "4 "))
           | _ -> None in
         effc)
    }
let () =
  Ppx_effects_runtime.match_with comp ()
    {
      Ppx_effects_runtime.retc = (function | e -> e);
      exnc = Ppx_effects_runtime.raise;
      effc =
        (let effc : type continue_input.
           continue_input Stdlib.Effect.t ->
             ((continue_input, _) Stdlib.Effect.Deep.continuation -> _)
               option
           =
           function
           | E ->
               Some
                 ((fun k ->
                     print_string "1 "; continue k "2 "; print_string "4 "))
           | _ -> None in
         effc)
    }
